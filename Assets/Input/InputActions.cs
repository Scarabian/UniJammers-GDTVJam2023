//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace uj.input.actions
{
    public partial class @InputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player General"",
            ""id"": ""58102b3c-1d75-46b7-8e86-266fd887e11d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5253baf2-d6fa-4238-9f27-c3944ec43182"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2564bb8c-f260-44d2-b6e7-ea32d7923779"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""23ff611d-59ad-4304-a912-bf77b76a0003"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8c6642cb-820a-41f6-a64d-ba5fe32c467e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""30d0d753-ea99-4565-85b8-d36c2b97ca4d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6fb0da8e-357f-449d-87e4-4afc7dd582f8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a801cafa-276e-44e3-b99b-c015f2e0c3f3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""37e38f9b-e216-4dce-b402-24a10fdb4bf4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6f890f46-aa5d-4b08-8730-999de3224d5b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2755a6c3-18b2-4ac7-8973-8a905167f5c4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player First Person"",
            ""id"": ""83e3dd45-de26-4942-886f-09d8ad92ad7e"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9d7ca748-f346-407a-9bb9-714cbca2bffb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f8cbab6a-577e-4d92-992c-18b0f8a7c342"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player General
            m_PlayerGeneral = asset.FindActionMap("Player General", throwIfNotFound: true);
            m_PlayerGeneral_Move = m_PlayerGeneral.FindAction("Move", throwIfNotFound: true);
            // Player First Person
            m_PlayerFirstPerson = asset.FindActionMap("Player First Person", throwIfNotFound: true);
            m_PlayerFirstPerson_Look = m_PlayerFirstPerson.FindAction("Look", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player General
        private readonly InputActionMap m_PlayerGeneral;
        private List<IPlayerGeneralActions> m_PlayerGeneralActionsCallbackInterfaces = new List<IPlayerGeneralActions>();
        private readonly InputAction m_PlayerGeneral_Move;
        public struct PlayerGeneralActions
        {
            private @InputActions m_Wrapper;
            public PlayerGeneralActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerGeneral_Move;
            public InputActionMap Get() { return m_Wrapper.m_PlayerGeneral; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerGeneralActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerGeneralActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerGeneralActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerGeneralActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IPlayerGeneralActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IPlayerGeneralActions instance)
            {
                if (m_Wrapper.m_PlayerGeneralActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerGeneralActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerGeneralActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerGeneralActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerGeneralActions @PlayerGeneral => new PlayerGeneralActions(this);

        // Player First Person
        private readonly InputActionMap m_PlayerFirstPerson;
        private List<IPlayerFirstPersonActions> m_PlayerFirstPersonActionsCallbackInterfaces = new List<IPlayerFirstPersonActions>();
        private readonly InputAction m_PlayerFirstPerson_Look;
        public struct PlayerFirstPersonActions
        {
            private @InputActions m_Wrapper;
            public PlayerFirstPersonActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_PlayerFirstPerson_Look;
            public InputActionMap Get() { return m_Wrapper.m_PlayerFirstPerson; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerFirstPersonActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerFirstPersonActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerFirstPersonActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerFirstPersonActionsCallbackInterfaces.Add(instance);
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }

            private void UnregisterCallbacks(IPlayerFirstPersonActions instance)
            {
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
            }

            public void RemoveCallbacks(IPlayerFirstPersonActions instance)
            {
                if (m_Wrapper.m_PlayerFirstPersonActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerFirstPersonActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerFirstPersonActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerFirstPersonActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerFirstPersonActions @PlayerFirstPerson => new PlayerFirstPersonActions(this);
        public interface IPlayerGeneralActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IPlayerFirstPersonActions
        {
            void OnLook(InputAction.CallbackContext context);
        }
    }
}
